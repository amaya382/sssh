#!/bin/bash

# opts
ssh_cmd="${SSSH_SSH_CMD:-ssh}"
sftp_cmd="${SSSH_SFTP_CMD:-/usr/lib/openssh/sftp-server}"
sshfs_cmd="${SSSH_SSHFS_CMD:-sshfs}"
sshfs_ssh_cmd="${SSSH_SSHFS_SSH_CMD:-ssh}"
sshfs_use_remote_uid="${SSSH_SSHFS_USE_REMOTE_UID:-true}"
sshfs_use_allow_other="${SSSH_SSHFS_USE_ALLOW_OTHER:-true}"
sshfs_use_cache="${SSSH_SSHFS_USE_CACHE:-false}"
enable_eval_and_clipboard="${SSSH_ENABLE_EVAL_AND_CLIPBOARD:-true}"
r_eval_cmd_name="${SSSH_REVERSE_EVAL_CMD_NAME:-reval}"
r_copy_cmd_name="${SSSH_REMOTE_COPY_CMD_NAME:-rcopy}"
r_paste_cmd_name="${SSSH_REMOTE_PASTE_CMD_NAME:-rpaste}"
ssh_port=22
l_mount_dir=''
r_mount_dir=''
w_tty=false
cmds_work_w_tty=()
while [[ -n "$1" ]]; do
  case "$1" in
    --ssh_cmd )
      ssh_cmd="$2"
      shift ;;
    --sftp_cmd )
      sftp_cmd="$2"
      shift ;;
    --sshfs_cmd )
      sshfs_cmd="$2"
      shift ;;
    --sshfs_ssh_cmd )
      sshfs_ssh_cmd="$2"
      shift ;;
    --sshfs_use_remote_uid )
      sshfs_use_remote_uid="$2"
      shift ;;
    --sshfs_use_allow_other )
      sshfs_use_allow_other="$2"
      shift ;;
    --sshfs_use_cache )
      sshfs_use_cache="$2"
      shift ;;
    --enable_eval_and_clipboard )
      enable_eval_and_clipboard="$2"
      shift ;;
    --remote_copy_cmd_name )
      r_copy_cmd_name="$2"
      shift ;;
    --remote_paste_cmd_name )
      r_paste_cmd_name="$2"
      shift ;;
    --reverse_eval_cmd_name )
      r_eval_cmd_name="$2"
      shift ;;
    --volume )
      l_mount_dir="$(echo $2 | cut -d ':' -f 1)"
      r_mount_dir="$(echo $2 | cut -d ':' -f 2)"
      shift ;;
    -b | -c | -D | -E | -e | -F | -I | -i | -J | -L | -l | -m | -O | -o | -p | -Q | -R | -S | -W | -w )
      if [ "$1" = '-p' ]; then
        ssh_port="$2"
      fi
      ssh_opts="${ssh_opts} $1 $2"; shift ;;
    -t )
      # expect commands which work w/ tty are passed
      # e.g,
      # sssh -t user@host zsh
      #      ^^   expects ^^^
      w_tty=true
      ;;
    -* )
      ssh_opts="${ssh_opts} $1" ;;
    * )
      if [ -z "${ssh_remote:+_}" ]; then
        ssh_remote="$1"
      else
        cmds_work_w_tty+=("$1")
      fi; ;;
  esac
  shift
done


# trap
trap_handlers=()
add_trap() {
  trap_handlers+=("$1")
}
_trap() {
  for handler in "${trap_handlers[@]}"; do
    eval $handler
  done
}
trap "_trap" 0 1 2 3 15


# tmp dirs
l_tmp_dir="$(mktemp -d)"
add_trap "rm -rf ${l_tmp_dir}"

r_tmp_dir="$(${ssh_cmd} ${ssh_remote} -p ${ssh_port} 'mktemp -d')"
add_trap "${ssh_cmd} ${ssh_remote} -p ${ssh_port} \"rm -rf ${r_tmp_dir}\""


# --volume
if [ "${l_mount_dir}" != '' -a "${r_mount_dir}" != '' ]; then
  if [ "$(${ssh_cmd} ${ssh_remote} -p ${ssh_port} "[ -e ${r_mount_dir} ] && echo o || echo x")" = 'x' ]; then
    ${ssh_cmd} ${ssh_remote} -p ${ssh_port} "mkdir -p ${r_mount_dir}"
    echo "Created ${r_mount_dir} on ${ssh_remote}"
  else
    if [ -n "$(${ssh_cmd} ${ssh_remote} -p ${ssh_port} "ls ${r_mount_dir}")" ]; then
      echo "${ssh_remote}:${r_mount_dir} already exists and is not empty."
      exit 1
    fi
  fi

  l_sshfs_fifo="${l_tmp_dir}/sshfs_fifo"
  mkfifo -m 600 "${l_sshfs_fifo}"
  "${sftp_cmd}" < "${l_sshfs_fifo}" \
  | ${ssh_cmd} "${ssh_remote}" -p "${ssh_port}" \
    "\"${sshfs_cmd}\" -C \
      -o slave \
      $("${sshfs_use_allow_other}" && echo '-o allow_other') \
      -o ssh_command=\"\$(which ${sshfs_ssh_cmd%% *} &> /dev/null && echo '${sshfs_ssh_cmd}' || echo 'ssh')\" \
      \$(\"${sshfs_use_remote_uid}\" && echo \"-o uid=\$(id -u \$(whoami))\") \
      -o cache=$("${sshfs_use_cache}" && echo 'yes' || echo 'no') \
      -o transform_symlinks \
      -o follow_symlinks \
      \":${l_mount_dir}\" \"${r_mount_dir}\"" \
  > "${l_sshfs_fifo}" &
  sshfs_proc="$!"
  add_trap "kill ${sshfs_proc} && wait ${sshfs_proc} && ${ssh_cmd} ${ssh_remote} -p ${ssh_port} \"fusermount -u ${r_mount_dir} > /dev/null 2>&1\""
fi


# remote clipboard
if which xsel &> /dev/null; then
  l_copy_cmd='xsel -bi'
  l_paste_cmd='xsel -bo'
elif which xclip &> /dev/null; then
  l_copy_cmd='xclip -selection c'
  l_paste_cmd='xclip -selection c -o'
elif which pbcopy &> /dev/null && which pbpaste &> /dev/null; then
  l_copy_cmd='pbcopy'
  l_paste_cmd='pbpaste'
else
  l_copy_cmd=''
  l_paste_cmd=''
fi

if which base64 &> /dev/null; then
  case "${OSYTPE}" in
    darwin* )
      l_base64_d_cmd='base64 -D' ;;
    * )
      l_base64_d_cmd='base64 -d' ;;
  esac
elif which openssl &> /dev/null; then
  l_base64_d_cmd='openssl enc -base64'
else
  echo "[Warn] sssh requires base64 or openssl in your local for reverse eval and clipboard support" >&2
fi

if ${enable_eval_and_clipboard} && \
  [ "${l_copy_cmd}" != '' -a "${l_paste_cmd}" != '' -a "${l_base64_d_cmd}" != '' ]; then
  # remote copy support
  r_copy_fifo="${r_tmp_dir}/copy_fifo"
  l_copy_pid_file="${l_tmp_dir}/copy_pid"
  sh -c "{ ${ssh_cmd} -t -t ${ssh_remote} -p ${ssh_port} \
    \"mkfifo -m 600 ${r_copy_fifo} && tail -f ${r_copy_fifo}\" \
    | while read chunk; do \
      echo \${chunk} | ${l_base64_d_cmd} | ${l_copy_cmd}; \
      done & } ; jobs -p" > ${l_copy_pid_file}
  copy_pid="$(cat ${l_copy_pid_file})"
  add_trap "kill ${copy_pid}"

  # reverse eval support
  r_eval_fifo="${r_tmp_dir}/eval_fifo"
  l_eval_pid_file="${l_tmp_dir}/eval_pid"
  sh -c "{ ${ssh_cmd} -t -t ${ssh_remote} -p ${ssh_port} \
    \"mkfifo -m 600 ${r_eval_fifo} && tail -f ${r_eval_fifo}\" \
    | while read chunk; do
      eval \$(echo \${chunk#*:} | ${l_base64_d_cmd}) 2>&1 | base64 \
      | ${ssh_cmd} ${ssh_remote} -p ${ssh_port} \
        \"cat - > ${r_tmp_dir}/\${chunk%%:*}_fifo\";
      done & } ; jobs -p" > ${l_eval_pid_file}
  eval_pid="$(cat ${l_eval_pid_file})"
  add_trap "kill ${eval_pid}"

  # ssh w/ reverse eval and remote clipboard support
  r_eval_cmd="${r_tmp_dir}/${r_eval_cmd_name}"
  r_copy_cmd="${r_tmp_dir}/${r_copy_cmd_name}"
  r_paste_cmd="${r_tmp_dir}/${r_paste_cmd_name}"
  pre_cmd="\
export PATH=${r_tmp_dir}:\${PATH}

cat << EOS > ${r_eval_cmd}
#!/bin/bash
result_fifo=\"${r_tmp_dir}/\\\$\\\$_fifo\"
mkfifo -m 600 \\\${result_fifo}
trap \"rm -f \\\${result_fifo}\" 0 1 2 3 15
echo \\\$\\\$:\\\$(cat - | base64) > ${r_eval_fifo}
cat \\\${result_fifo} | base64 -d
EOS

cat << EOS > ${r_copy_cmd}
#!/bin/bash
cat - | base64 > ${r_copy_fifo}
EOS

cat << EOS > ${r_paste_cmd}
#!/bin/bash
echo '${l_paste_cmd}' | ${r_eval_cmd}
EOS

chmod +x ${r_eval_cmd} ${r_copy_cmd} ${r_paste_cmd}"

  if "${w_tty}"; then
    tty_cmd="${cmds_work_w_tty[@]}"
  else
    tty_cmd="\$(cat /etc/passwd | grep \$(whoami) | grep -oP \"[^:]+$\")"
  fi
  ${ssh_cmd} "${ssh_remote}" -t ${ssh_opts} "${pre_cmd}
  ${tty_cmd}"
else
  # ssh w/o reverse eval and remote clipboard support
  echo "[Warn] sssh is running w/o reverse eval and remote clipboard support" >&2
  if "${w_tty}"; then
    ${ssh_cmd} "${ssh_remote}" -t ${ssh_opts} "${cmds_work_w_tty[@]}"
  else
    ${ssh_cmd} "${ssh_remote}" ${ssh_opts}
  fi
fi
