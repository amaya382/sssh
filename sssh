#!/bin/bash

# opts
ssh_cmd=ssh
sftp_cmd=/usr/lib/openssh/sftp-server
sshfs_cmd=sshfs
use_remote_uid=true
use_allow_other=true
ssh_port=22
local_dir=''
remote_dir=''
remote_copy_cmd_name=rcopy
remote_paste_cmd_name=rpaste
while [[ -n "$1" ]]; do
  case "$1" in
    --ssh_cmd )
      ssh_cmd="$2"
      shift ;;
    --sftp_cmd )
      sftp_cmd="$2"
      shift ;;
    --sshfs_cmd )
      sshfs_cmd="$2"
      shift ;;
    --use_remote_uid )
      use_remote_uid="$2"
      shift ;;
    --use_allow_other )
      use_allow_other="$2"
      shift ;;
    --volume )
      local_dir="$(echo $2 | cut -d ':' -f 1)"
      remote_dir="$(echo $2 | cut -d ':' -f 2)"
      shift ;;
    -b | -c | -D | -E | -e | -F | -I | -i | -J | -L | -l | -m | -O | -o | -p | -Q | -R | -S | -W | -w )
      if [ "$1" = '-p' ]; then
        ssh_port="$2"
      fi
      ssh_opts="${ssh_opts} $1 $2"; shift ;;
    -t )
      shift ;; # Ignore -t since use it automatically if need be
    -* )
      ssh_opts="${ssh_opts} $1" ;;
    * )
      if [ -z "${ssh_remote:+_}" ]; then
        ssh_remote="$1"
      fi; ;;
  esac
  shift
done


# trap
trap_handlers=()
add_trap() {
  trap_handlers+=("$1")
}
_trap() {
  for handler in "${trap_handlers[@]}"; do
    $handler
  done
}
trap "_trap" 0 1 2 3 15


# tmp dirs
tmp_dir="$(mktemp -d)"
add_trap "rm -rf ${tmp_dir}"

remote_tmp_dir="$(${ssh_cmd} ${ssh_remote} -p ${ssh_port} mktemp -d)"
add_trap "${ssh_cmd} ${ssh_remote} -p ${ssh_port} rm -rf ${remote_tmp_dir}"


# --volume
if [ "${local_dir}" != '' -a "${remote_dir}" != '' ]; then
  if [ "$(${ssh_cmd} ${ssh_remote} -p ${ssh_port} [ -e ${remote_dir} ] && echo o || echo x)" = "x" ]; then
    ${ssh_cmd} ${ssh_remote} -p ${ssh_port} mkdir -p "${remote_dir}"
    echo "Created ${remote_dir} on ${ssh_remote}"
  else
    if [ -n "$(${ssh_cmd} ${ssh_remote} -p ${ssh_port} ls ${remote_dir})" ]; then
      echo "${ssh_remote}:${remote_dir} already exists and is not empty."
      exit 1
    fi
  fi

  if "${use_remote_uid}" ; then
    uid="$(${ssh_cmd} ${ssh_remote} -p ${ssh_port} id -u \$\(whoami\))"
  fi

  sshfs_fifo="${tmp_dir}/sshfs_fifo"
  mkfifo -m 600 "${sshfs_fifo}"
  "${sftp_cmd}" < "${sshfs_fifo}" \
  | "${ssh_cmd}" "${ssh_remote}" -p "${ssh_port}" \
    "${sshfs_cmd}" -C -o slave $("${use_allow_other}" && echo "-o allow_other") ${uid/#/-o uid=} -o cache=no -o transform_symlinks -o follow_symlinks \
      ":${local_dir}" "${remote_dir}" \
  > "${sshfs_fifo}" &
  sshfs_proc="$!"
  add_trap "kill ${sshfs_proc} && wait ${sshfs_proc} && ${ssh_cmd} ${ssh_remote} -p ${ssh_port} fusermount -u ${remote_dir} > /dev/null 2>&1"
fi


# clipboard
if which xsel &> /dev/null; then
  copy_cmd='xsel -bi'
elif which xclip &> /dev/null; then
  copy_cmd='xclip -selection clipboard'
elif which pbcopy &> /dev/null; then
  copy_cmd='pbcopy'
else
  copy_cmd=''
fi

if which base64 &> /dev/null; then
  case "${OSYTPE}" in
    darwin* )
      base64_d_cmd='base64 -D' ;;
    * )
      base64_d_cmd='base64 -d' ;;
  esac
elif which openssl &> /dev/null; then
  base64_d_cmd='openssl enc -base64'
else
  echo "[Warn] sssh requires base64 or openssl for clipboard support"
fi

if [ "${copy_cmd}" != '' -a "${base64_d_cmd}" != '' ]; then
  clipboard_fifo="${remote_tmp_dir}/clipboard_fifo"
  clipboard_pid_file="${tmp_dir}/clipboard_pid"
  sh -c "{ ${ssh_cmd} ${ssh_remote} -p ${ssh_port} \
    \"mkfifo -m 600 ${clipboard_fifo} && tail -f ${clipboard_fifo}\" \
    | while read chunk; do echo \${chunk} | ${base64_d_cmd} | ${copy_cmd}; done & } ; jobs -p" > ${clipboard_pid_file}
  clipboard_pid="$(cat ${clipboard_pid_file})"
  add_trap "kill ${clipboard_pid}"

  # ssh w/ clipboard support
  remote_copy_cmd="${remote_tmp_dir}/${remote_copy_cmd_name}"
  "${ssh_cmd}" "${ssh_remote}" -t ${ssh_opts} " \
    export PATH=\${PATH}:${remote_tmp_dir} && \
    echo \"cat - | base64 > ${clipboard_fifo}\" > ${remote_copy_cmd} && \
    chmod +x ${remote_copy_cmd} && \
    \$(cat /etc/passwd | grep \$(whoami) | grep -oP '[^:]+$')"
else
  # ssh w/o clipboard support
  "${ssh_cmd}" "${ssh_remote}" ${ssh_opts}
fi
